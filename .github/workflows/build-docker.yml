name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      ref_name_slug: ${{ steps.ref.outputs.ref_name_slug }}
      default_slug: ${{ steps.ref.outputs.default_slug }}
      image_name: ${{ steps.ref.outputs.image_name }}
    steps:
      - id: ref
        env:
          REF_NAME: ${{ github.ref_name }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Create slugs for caching
          REF_SLUG="${REF_NAME//[^a-zA-Z0-9]/-}"
          DEFAULT_SLUG="${DEFAULT_BRANCH//[^a-zA-Z0-9]/-}"
          
          echo "ref_name_slug=${REF_SLUG}" >> $GITHUB_OUTPUT
          echo "default_slug=${DEFAULT_SLUG}" >> $GITHUB_OUTPUT
          echo "image_name=${REPO_NAME}" >> $GITHUB_OUTPUT
          
          echo "Reference name slug: ${REF_SLUG}"
          echo "Default branch slug: ${DEFAULT_SLUG}"
          echo "Image name: ${REPO_NAME}"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      digest: ${{ steps.build.outputs.digest }}
      metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-{{ sha }}-{{ date 'X' }}
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Digistore24 MCP Server
            org.opencontainers.image.description=Model Context Protocol server for Digistore24 API
            org.opencontainers.image.vendor=Digistore24
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/buildcache:${{ needs.prepare.outputs.default_slug }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/buildcache:${{ needs.prepare.outputs.ref_name_slug }}
            type=gha
          cache-to: |
            ${{ (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')) && format('type=registry,ref={0}/{1}/buildcache:{2},mode=max', env.REGISTRY, env.IMAGE_NAME, needs.prepare.outputs.ref_name_slug) || '' }}
            type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Docker image
        run: |
          # Pull the built image
          docker pull ${{ needs.build.outputs.image }}
          
          # Test that the image starts successfully
          container_id=$(docker run -d -p 3000:3000 ${{ needs.build.outputs.image }})
          
          # Wait for container to be ready
          sleep 10
          
          # Test health endpoint
          if curl -f http://localhost:3000/health; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs $container_id
            exit 1
          fi
          
          # Cleanup
          docker stop $container_id
          docker rm $container_id
